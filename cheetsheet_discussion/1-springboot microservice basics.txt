Spring boot Microservice Training:
------------------------------------
Duration 2 days:

* SW installation

* Key topics
	Introduction to Microservices
	Introduction to Spring Boot
	Using “Twelve-Factor App” Style Configuration
	Working with Spring Data
	Spring Cloud Overview
	Scaling Microservices with Spring Cloud
	Autoscaling Microservices
	Logging and Monitoring Microservices
	Containerizing Microservices with Docker
	Microservices Development Lifecycle (Theory)
	Securing Microservices using Spring Security


Day 1: Spring Boot

Key topics:
==================
=> Understand Depdendency Injection
=> bean wiring :xml, annoation, java configuraton
=> REST basics
=> Spring boot REST application
=> Spring data
=>Spring boot Monotring and Logging
=> spring boot profile
=> spring boot actuator
=> Spring Boot microservice architecture
=> spring boot openfeign
=> Spring boot security


Day 1: session 1:
____________________

Understand Depdendency Injection
_________________________________

What is the need of spring framework?
-----------------------------------


Lets take a example:

Rest 
Controller <------------ Service layer <---------- persistance layer <------ SessionFactory

ravi team		sumit team			kapil team

what sping does it produce loose coupling between the layer 
Take example lets say ravi team creating controller layer, sumit team is creating service layer and kapil team is
creating persitance layer... now controller layer need service and service layer need persistance layer

as we have design our application as per interface and we have use DI therefore kapil team can change implemenation
of service layer ( let earlier they are using Jdbc now wnat to use hibernate ) without effectiving even a single line
of code in Service layer (sumit team) do you not think it is great...

beside that spring DI help to manage dependency of our project and make our project flexiable


						---------- ProductDaoImplHib
						|
	ProductService <---------------- ProductDao-------ProductDaoImplJdbc
						|
						---------- ProductDaoImplUtil
		
public class Product {
		private Integer id;
		private String name;
		private BigDecimal price;	
}
					


public interface ProductDao {
	public List<Product>getProducts();
}


public interface ProductDaoImplUtil implements ProductDao {
	public List<Product>getProducts(){
		//collection implementation ....
	}
}

public interface ProductDaoImplJdbc implements ProductDao {
	public List<Product>getProducts(){
		//jdbc implementation ....
	}
}



public interface ProductService {
	public List<Product>getProducts();
}



public interface ProductServiceImpl  implements ProductService{

	private ProductDao productDao;

	public ProductServiceImpl(){
		productDao=new ProductDaoImplUtil();   // or ProductDaoImplJdbc()
	}


	public List<Product>getProducts(){
	// business logic
	}
}


=> we have to change the implementation ...whenever we swap dao layer :(


Spring BeanFactory vs ApplicationContext
______________________________________

 * BeanFactory:
 	 - light weight container , dont support many featues
 	  - dont use it
 BeanFactory applicationContext=new XmlBeanFactory(new ClassPathResource("demo.xml"));
 
 *  ApplicationContext 
  	- more powerful
    	ApplicationContext applicationContext=
				new ClassPathXmlApplicationContext("demo.xml");
				
	ApplicationContext
		-ClassPathXmlApplicationContext
		-FileSystemXmlApplicationContext
		-AnnotationConfigApplicationContext
		-XMLWebApplicationContext


spring bean configuration:
________________________
1. xml configuration
2. annotation configuration
3. java configuration


Understand Aspect Oriented Programming
______________________________________
	* If i need to take training at some client location, infra is provided by that client
		i need to only carray my laptop

	* help to achive high cohesion


 consider: we need to find how much time it take to execute code of service layer and do logging into a log file


public interface ProductServiceImpl  implements ProductService{

	private ProductDao productDao;

	public ProductServiceImpl(){
		productDao=new ProductDaoImplUtil();   // or ProductDaoImplJdbc()
	}


	public List<String>getProducts(){
	//how much it take to execute and do logging too ....
	// business logic
	}
}
 




session 2:
___________
MVC design pattern



History Spring boot : Summarized:
_________________________________

1.0.0: Support from Java 6 - 8
1.3.0: Support from Java 7 - 8, additional configuration for Java 6 required
2.0.0: Support from Java 8 - ...


	Advantage of spring boot , configuration spring boot
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 	Advantage of spring boot
	_____________________

	=> Auto-Configuration 

	=> Dependency Management

	=> Externalized Configuration
		bean can be configured through application.properties file 
		without touching java or xml config

	=> Production support
		We get health checking, application and jvm metrics, 
		jmx via http and a few more things for free

	=> Runnable Jars
		 We can package your application as a runnable jar with embedded tomcat
		 included so it presents a self-contained deployment unit

	=> Microservice


	configuration spring boot
	____________________

	create spring boot project: choose web, jpa, derby....

	//Configuration, @EnableAutoConfiguration and @ComponentScan



	@SpringBootApplication
	public class Application {
	
	  public static void main(String[] args) {
	    ApplicationContext ctx = SpringApplication.run(Application.class, args);
	
	    System.out.println("Let's inspect the beans provided by Spring Boot:");
	
	    String[] beanNames = ctx.getBeanDefinitionNames();
	    Arrays.sort(beanNames);
	    for (String beanName : beanNames) {
	        System.out.println(beanName);
	    }
	  }
	
	}

	spring-boot:run


	Spring boot ApplicationRunner and CommandLineRunner:
	----------------------------------------

	@Component
	public class ApplicationRunnerBean implements ApplicationRunner {
	@Override
	public void run(ApplicationArguments args) throws Exception {
		String collectStr = Arrays.stream(args.getSourceArgs()).collect(Collectors.joining(","));
		System.out.println(collectStr);
	}

	}
https://www.concretepage.com/spring-boot/spring-boot-commandlinerunner-and-applicationrunner-example#:~:text=The%20difference%20between%20CommandLineRunner%20and,spring%20ApplicationArguments%20as%20an%20argument.&text=To%20execute%20them%20in%20an,Order%20annotation%20or%20Ordered%20interface.
	Hello world:
	-----------

	
	@RestController
	public class HelloRestController {
		
		@RequestMapping("/hello")
		public String hello(){
			return "spring boot";
		}
           }  
	
	public class Product {
		private Integer id;
		private String name;
		private BigDecimal price;	
         }

	
	
	@GetMapping("products/{id}")
	public Book getProductById(@PathVariable(name = "id")int id) {
		return new Product(id, "java basics book", new BigDecimal(300));
	}





	application.properties
	---------------------------
	server.servlet.context-path=/productapp
	server.port=8080



Running spring boot :
____________________

	eclipse plugin
	spring initilizer
	spring cli

	https://www.journaldev.com/8195/spring-boot-cli-setup-and-helloworld-example

	spring init -n=jpa-one-to-one-demo -d=web,jpa,mysql --package-name=com.example.jpa demoproj


bannner:
________________
spring.banner.location=classpath:banner.txt

https://devops.datenkollektiv.de/banner.txt/index.html



java -jar  jpa_demo2-0.0.1-SNAPSHOT.jar --server.port=8050

https://docs.spring.io/spring-boot/docs/1.1.2.RELEASE/reference/html/common-application-properties.html



Note:Spring boot config: EnableAutoConfiguration
________________________________________________

disable all database related auto configuration in spring-boot
__________________________________________________________

@Configuration
@EnableAutoConfiguration(exclude = {DataSourceAutoConfiguration.class,
 DataSourceTransactionManagerAutoConfiguration.class, HibernateJpaAutoConfiguration.class})
@Profile ("client_app_profile_name")
public class ClientAppConfiguration {
    //it can be left blank
}




Day 2: 

session 1: spring boot rest crud application 
___________________________________________

Rest 
Controller <------------ Service layer <---------- persistance layer <------ SessionFactory




step 1: application.properties
_______________________
server.servlet.context-path=/productapp
server.port=8082

spring.datasource.url=jdbc:mysql://localhost:3306/demoms?useSSL=false
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true



UserInterface.PRODUCT_ADD_SUCCESS=product added successfully
UserInterface.PRODUCT_UPDATE_SUCCESS=product added successfully
UserInterface.PRODUCT_DELETE_SUCCESS=product added successfully

Service.PRODUCT_NOT_EXISTS=Product not exist


in case of h2 database :
---------------------

server.port=8090
server.servlet.context-path=/productapp
spring.h2.console.enabled=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# Custom H2 Console URL
spring.h2.console.path=/h2

spring.jpa.hibernate.ddl-auto=update

logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR

spring.jpa.show-sql=true 





Step 2: dao layer
_______________________
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@ToString
@Entity
@Table(name = "product_table")
public class Product {
	@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer id;
	private String name;
	private BigDecimal price;
	public Product(String name, BigDecimal price) {
		super();
		this.name = name;
		this.price = price;
	}
		
}

@Repository
public interface ProductDao extends JpaRepository<Product, Integer>{
	public Product findByName(String name);
}

Step 3: service layer
_______________________

public interface ProductService {
	public List<Product> findAll();
	public Product getById(int id);
	public Product addProduct(Product product);
	public Product updateProduct(int id, Product product);
	public Product deleteProduct(int id);
	
}



public class ProductNotFoundException extends RuntimeException{
	public ProductNotFoundException(String message) {
		super(message);
	}
}




@Service
@Transactional
public class ProductServiceImpl implements ProductService {

	private ProductDao productDao;

	@Autowired
	public ProductServiceImpl(ProductDao productDao) {
		this.productDao = productDao;
	}

	@Override
	public List<Product> findAll() {
		return productDao.findAll();
	}

	@Override
	public Product getById(int id) {
		return productDao.findById(id)
				.orElseThrow(() -> new ProductNotFoundException("product with id" + id + " is not found"));
	}

	@Override
	public Product addProduct(Product product) {
		productDao.save(product);
		return product;
	}

	@Override
	public Product updateProduct(int id, Product product) {
		Product productToUpdate= getById(id);
		productToUpdate.setPrice(product.getPrice());
		productDao.save(productToUpdate);
		return productToUpdate;
	}

	@Override
	public Product deleteProduct(int id) {
		Product productToDelete= getById(id);
		productDao.delete(productToDelete);
		return productToDelete;
	}

}


Step 4: rest controller
_______________________
@RestController
public class ProductController {

	private ProductService productService;

	@Autowired
	public ProductController(ProductService productService) {
		this.productService = productService;
	}
	@GetMapping(path = "products")
	public List<Product>findAll(){
		return productService.findAll();
	}
	
	@GetMapping(path = "products/{id}")
	public Product findById(@PathVariable(name = "id") int id){
		return productService.getById(id);
	}
	
	@PostMapping(path = "products")
	public Product addProduct( @RequestBody Product product){
		return productService.addProduct(product);
	}
	
	@DeleteMapping(path = "products/{id}")
	public Product deleteProduct(@PathVariable(name = "id") int id){
		return productService.deleteProduct(id);
	}
	
	@PutMapping(path = "products/{id}")
	public Product updateProduct(@PathVariable(name = "id") int id, @RequestBody Product product){
		return productService.updateProduct(id, product);
	}
}



Let




Step 5: rest controller: ResponseEntity
_______________________________________

@RestController
public class ProductController {

	private ProductService productService;

	@Autowired
	public ProductController(ProductService productService) {
		this.productService = productService;
	}
	
	@GetMapping(path = "products")
	public ResponseEntity<List<Product>> findAll(){
		return ResponseEntity.status(HttpStatus.OK).body(productService.findAll());
	}
	
	@GetMapping(path = "products/{id}")
	public ResponseEntity<Product> findById(@PathVariable(name = "id") int id){
		return ResponseEntity.ok(productService.getById(id));
	}
	
	@PostMapping(path = "products")
	public ResponseEntity<Product> addProduct( @RequestBody Product product){
		return ResponseEntity.status(HttpStatus.CREATED).body(productService.addProduct(product));
	}
	
	@DeleteMapping(path = "products/{id}")
	public ResponseEntity<Void> deleteProduct(@PathVariable(name = "id") int id){
		 productService.deleteProduct(id);
		 return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
	}
	
	@PutMapping(path = "products/{id}")
	public ResponseEntity<Product> updateProduct(@PathVariable(name = "id") int id, @RequestBody Product product){
		return ResponseEntity.status(HttpStatus.CREATED).body(productService.updateProduct(id, product));
	}
}




Step 6: rest controller exception handling
_______________________________________
@ResponseStatus(code =HS.NotFound)
ProductNotFoundException extends RuntimeExcetion{
}


@Data
@NoArgsConstructor
@AllArgsConstructor
public class ErrorDetails {
	private String message;
	private String statusCode;
	
	private String name;
    private LocalDateTime localDateTime;
	
}



@RestControllerAdvice
public class ExHandlerController {

    @ExceptionHandler(ProductNotFoundException.class)
    public ResponseEntity<ErrorDetails> handle404(ProductNotFoundException ex){
        ErrorDetails details=new ErrorDetails();
        details.setLocalDateTime(LocalDateTime.now());
        details.setMessage(ex.getMessage());
        details.setName("rgupta.mtech@gmail.com");
        details.setStatusCode(HttpStatus.NOT_FOUND.toString());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(details);
    }
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorDetails> handle500(Exception ex){
        ErrorDetails details=new ErrorDetails();
        details.setMessage(ex.getMessage());
        details.setLocalDateTime(LocalDateTime.now());
        details.setName("rgupta.mtech@gmail.com");
        details.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR.toString());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(details);
    }
}


Step 7: JSR 303 validation api , exception handling
__________________________________________________

1. add validation api

2. apply @valid in post and update method 

3. 

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ProductDto {

	private int id;
	
	@NotNull(message = "{product.name.absent}")
	@Pattern(regexp = "[A-Za-z]+( [A-Za-z]+)*", message = "{product.name.invalid}")
	private String name;

	@NotNull(message = "{product.price.absent}")
	@Range(min = 100, max = 100000, message = "{product.price.invalid}")
	private BigDecimal price;

}


4. create exception handler

    @ResponseStatus(HttpStatus.BAD_REQUEST)
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public Map<String, String> handleInvalidArgument(MethodArgumentNotValidException ex) {

		Map<String, String> errorMap = new HashMap<>();
		ex.getBindingResult().getFieldErrors().forEach(error -> {
			errorMap.put(error.getField(), error.getDefaultMessage());
		});
		return errorMap;
	}


ValidationMessages.properties
-----------------------------

product.name.absent=Please provide product name
product.name.invalid=product Name should contain only alphabets and space

product.price.absent=Please provide product price 
account.price.invalid=Please provide correct price bw 100 to 100000


	Other validation example:
	-------------------------

	@Email(message = "{account.email.invalid}")
	@NotNull(message = "{account.email.absent}")
	private String email;
	
	@NotNull(message = "{account.phone.absent}")
	@Pattern(regexp = "[789][0-9]{9}", message = "{account.phone.invalid}")
	private String phone;



	private String category;
	
		EL BOOKS FMCG
	
	
Implementation of custom valiation logic:
-------------------------------------------

setp 1: create ProductTypeValidator need to be used by custom annotation

public class ProductTypeValidator implements ConstraintValidator<ValidateProductType, String> {
    @Override
    public boolean isValid(String productType, ConstraintValidatorContext constraintValidatorContext) {
        List<String> productTypes = Arrays.asList("EL", "BOOK","FMCG);
        return productTypes.contains(productType);
    }
}



setp 2: create Custom annotation

@Target({ElementType.FIELD,ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Constraint(validatedBy = ProductTypeValidator.class)
public @interface ValidateProductType {

    public String message() default "Invalid productType: It should be either EL, BOOK,FMCG;

    Class<?>[] groups() default {};

    Class<? extends Payload>[] payload() default {};
}



//custom annotation
    @ValidateProductType
    private String productType; //Electronic or Books
    

    

Supporting both xml and json:
	_______________________________

	Step 1: put parser for xml

	     <dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
	     </dependency>

	Step 2:
	@GetMapping(path = "products", produces = {MediaType.APPLICATION_JSON_VALUE, 
			MediaType.APPLICATION_XML_VALUE})





spring boot reading property files:
---------------------------------

1. @Value annotation
2. Enviornment
3. @ConfigrationProperties


@EnableConfigurationProperties(InfoDto.class)

@ConfigrationProperties(prefix="db")

Example:
--------
account:
  message: "welcome to productapp account manager"
  contactDetails:
    name: "raj"
    email: "rgupta.mtech@gmail.com"
  onCallSupport:
    -54645464556
    -75765777677
	
	

@ConfigurationProperties(prefix = "account")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class InfoDto {
    private String message;
    private Map<String, String>contactDetails;
    private List<String>onCallSupport;
}







Spring boot loging customization:
_____________________________________

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
    </exclusions>
</dependency>

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-log4j2</artifactId>
</dependency>


spring boot logging:
-------------------
 	     
Disable logging :
---------------
logging.level.root=OFF
logging.level.org.springframework.boot=OFF
spring.main.banner-mode=OFF   

	     
     
Customizing logging :
---------------	     
logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR

logging.level.com.productapp=info


logging.level.org.springframework.web: DEBUG
logging.level.org.hibernate: ERROR


# Logging pattern for the console
logging.pattern.console= "%d{yyyy-MM-dd } [%thread] %-5level %logger{36} - %msg%n"
#logging pattern for file
logging.pattern.file= "%d{yyyy-MM-dd } [%thread] %-5level %logger{36} - %msg%n"

logging.file.name=/home/raj/Desktop/logs/server.log
	     
	     
 
	     
	     

   



richardson maturity model
_________________________

Step 8: hateoas: Hypermedia as the Engine of Application State (HATEOAS)
__________________

 1: put hateoas dependencies

 2: enable static improt:

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

 3: change POJO class:

public class Product extends RepresentationModel<Product> {
} 



@GetMapping(path = "productsV2/{id}")
	public EntityModel<Product>  findByIdLink(@PathVariable(name = "id") int id){
		Link link=linkTo(methodOn(ProductController.class).findByIdLink(id)).withSelfRel();
		Product product=productService.getById(id);
		product.add(link);
		return EntityModel.of(product);
}

@GetMapping(path = "productsV2")
	public CollectionModel<Product> findAllV2(){
		List<Product> products=productService.findAll();
		for(Product product: products) {
			Link link=linkTo(methodOn(ProductController.class).findByIdLink(product.getId())).withSelfRel();
			product.add(link);
		}
		return CollectionModel.of(products);
}



9. Using OpenAPI 3.0
_____________________
https://www.bezkoder.com/spring-boot-swagger-3/
https://www.baeldung.com/spring-rest-openapi-documentation

https://editor.swagger.io/

=> Documenting a Spring REST API Using OpenAPI 3.0
=>Swagger is almost equivalent to SOAP formate, used for documentation of REST api

		Step 1:

	<dependency>
		<groupId>org.springdoc</groupId>
		<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
		<version>2.2.0</version>
	</dependency>

	Step 2:

	http://localhost:8090/bookapp/v3/api-docs
	
	http://localhost:8090/bookapp/swagger-ui/index.html

	http://localhost:8090/bookapp/v3/api-docs.yaml

	Step 3:
	Customization location
	springdoc.swagger-ui.path=/swagger-ui-bookapp.html

	@OpenAPIDefinition(info = @Info(title = "bookapp API", version = "2.0" , description = "YMSLI bookapp API"))
	public class BookappApplication implements CommandLineRunner {
	}


	
	@OpenAPIDefinition(
			info = @Info(
					title = "",
					description = "",
					version = "v1",
					contact = @Contact(
							name = "",
							email = "",
							url = ""
					),
					license = @License(
							name = "Apache 2.0",
							url = "https://www.cbre.com"
					)
			),
			externalDocs = @ExternalDocumentation(
					description =  "",
					url = "https://www.cbre.com/swagger-ui.html"
			)
	)

